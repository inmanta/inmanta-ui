// This pipeline builds and publishes an RPM for inmanta-ui
def send_slack_notification() {
    def color_map = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']
    slackSend color: color_map[currentBuild.currentResult],
                message: """*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}
More info at: ${env.BUILD_URL}"""
}

pipeline {

  agent {
    node {
      label 'mock'
    }
  }

  parameters {
    choice(name: 'release', choices: ['dev', 'next', 'stable'], description: 'Indicate whether a dev, next or stable release should be build.')
    string(name: 'web_console_version', description: 'The version of the webconsole that should be included in the rpm.')
    booleanParam(name: 'upload', defaultValue: false, description: 'Upload the RPM to the webserver.')
  }

  options {
    disableConcurrentBuilds()
    checkoutToSubdirectory('inmanta-ui')
    skipDefaultCheckout()
  }

  stages {
    stage('clear workspace and checkout source code') {
      when {
        // Skip this stage during initial trigger by Jenkins
        expression { env.release != null }
      }
      steps {
        deleteDir()
        dir('inmanta-ui') {
          checkout scm
        }
      }
    }
    stage("Setup virtualenv"){
      when {
        // Skip this stage during initial trigger by Jenkins
        expression { env.release != null }
      }
      steps{
        sh '''
          # Setup venv
          rm -rf ${WORKSPACE}/env
          python3 -m venv ${WORKSPACE}/env

          # Install dependencies
          ${WORKSPACE}/env/bin/pip3 install --pre -i https://artifacts.internal.inmanta.com/inmanta/dev irt
        '''
      }
    }
    stage("Build rpm") {
      when {
        // Skip this stage during initial trigger by Jenkins
        expression { env.release != null }
      }
      steps{
        withCredentials([string(credentialsId: 'fff7ef7e-cb20-4fb2-a93b-c5139463c6bf', variable: 'GITHUB_TOKEN')]) {
          sh '''
            # Activate venv
            source ${WORKSPACE}/env/bin/activate

            # Build RPM
            make -C ${WORKSPACE}/inmanta-ui rpm RELEASE=${release} WEB_CONSOLE_VERSION=${web_console_version}
          '''
        }
      }
    }
    stage("Upload RPM") {
      when {
        // Skip this stage during initial trigger by Jenkins
        allOf { expression { env.release != null } ; expression { "${upload}" == "true" } }
      }
      steps {
        sh '''
          # Activate venv
          source ${WORKSPACE}/env/bin/activate

          # Upload RPM
          make -C ${WORKSPACE}/inmanta-ui upload RELEASE=${release}
        '''
      }
    }
  }
  post {
    changed{
      send_slack_notification()
    }
    success{
      archiveArtifacts artifacts: 'inmanta-ui/rpms/*.rpm', allowEmptyArchive: true
    }
  }
}
